{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import bcrypt from 'bcryptjs'\nimport jwt from \"jsonwebtoken\";\nimport mongoose , { Model }  from 'mongoose';\n\ninterface User {\n  name: string;\n  email: string;\n  password: string;\n}\ninterface LoginData {\n  email: string;\n  password: string;\n}\n\n\n//create user module for signup \nexport const createUser = async (user: User , UserSchema: Model<User>) => {\n  // Hash password\n const password = await bcrypt.hash(user.password, 10);\n\n  const userData = new UserSchema({\n    name: user.name,\n    email: user.email,\n    password: password,\n  });\n\n  await userData.save();\n\n  return user;\n};\n//create user module for login \nexport const loginUser = async (loginData:LoginData , UserSchema: Model<User>) => {\n  // Fetch user from database\n  const user = await UserSchema.findOne({ email: loginData.email });\n\n  // Compare passwords\n  if (!user || !(await bcrypt.compare(loginData.password, user.password))) {\n    throw new Error(\"Invalid credentials\");\n  }\n  const payload = {\n    email: user.email,\n  };\n\n  const secretKey = \"your_secret_key\"; // Replace with your actual secret key\n  const token = jwt.sign(payload, secretKey, { expiresIn: \"1h\" }); // Set token expiration\n\n  return token;\n};\n//create user module for start the process on mentioned por\nexport const start = async ( MONGODB_URI : string) => {  \n\n  try {\n    await mongoose.connect(MONGODB_URI as string);\n    console.log(\"Connected to MongoDB\");\n  } catch (error) {\n    ``;\n    console.error(\"Error connecting to MongoDB:\", error);\n    throw error;\n  }\n};\n\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAmB;AACnB,0BAAgB;AAChB,sBAAkC;AAc3B,IAAM,aAAa,OAAO,MAAa,eAA4B;AAEzE,QAAM,WAAW,MAAM,gBAAAA,QAAO,KAAK,KAAK,UAAU,EAAE;AAEnD,QAAM,WAAW,IAAI,WAAW;AAAA,IAC9B,MAAM,KAAK;AAAA,IACX,OAAO,KAAK;AAAA,IACZ;AAAA,EACF,CAAC;AAED,QAAM,SAAS,KAAK;AAEpB,SAAO;AACT;AAEO,IAAM,YAAY,OAAO,WAAsB,eAA4B;AAEhF,QAAM,OAAO,MAAM,WAAW,QAAQ,EAAE,OAAO,UAAU,MAAM,CAAC;AAGhE,MAAI,CAAC,QAAQ,CAAE,MAAM,gBAAAA,QAAO,QAAQ,UAAU,UAAU,KAAK,QAAQ,GAAI;AACvE,UAAM,IAAI,MAAM,qBAAqB;AAAA,EACvC;AACA,QAAM,UAAU;AAAA,IACd,OAAO,KAAK;AAAA,EACd;AAEA,QAAM,YAAY;AAClB,QAAM,QAAQ,oBAAAC,QAAI,KAAK,SAAS,WAAW,EAAE,WAAW,KAAK,CAAC;AAE9D,SAAO;AACT;AAEO,IAAM,QAAQ,OAAQ,gBAAyB;AAEpD,MAAI;AACF,UAAM,gBAAAC,QAAS,QAAQ,WAAqB;AAC5C,YAAQ,IAAI,sBAAsB;AAAA,EACpC,SAAS,OAAO;AACd;AACA,YAAQ,MAAM,gCAAgC,KAAK;AACnD,UAAM;AAAA,EACR;AACF;","names":["bcrypt","jwt","mongoose"]}